import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from config.estilo import aplicar_estilo

st.set_page_config(page_title="Raio-X Comportamental", layout="centered")
aplicar_estilo()

# Cabe√ßalho do app
st.markdown("<h1 style='text-align: center;'>üß† Raio-X Comportamental</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; font-size: 18px;'>Entenda seus padr√µes alimentares e comportamentais</p>", unsafe_allow_html=True)
st.markdown("---")

# Coleta de dados iniciais
with st.form(key="formulario_inicial"):
    nome = st.text_input("Nome completo")
    email = st.text_input("E-mail")
    celular = st.text_input("Celular (com DDD)")
    iniciar = st.form_submit_button("üìã Iniciar Question√°rio")

if "pagina" not in st.session_state:
    st.session_state.pagina = 0

# Perguntas principais (23)
perguntas_comportamento = [
    "Sinto vontade de comer quando estou ansiosa(o), triste ou entediada(o)",
    "Como para me acalmar ou me sentir melhor emocionalmente",
    "Como mesmo sem fome, s√≥ pelo prazer de comer",
    "Sinto vontade de comer depois de brigas, frustra√ß√µes ou decep√ß√µes",
    "Associo comida a recompensa (como quando mere√ßo algo)",
    "Como mais quando estou sozinha(o) ou escondida(o)",
    "Sinto que perco o controle quando come√ßo a comer certos alimentos",
    "Sinto culpa ou vergonha ap√≥s comer em excesso",
    "Tenho dificuldade de parar de comer mesmo estando satisfeita(o)",
    "Como mais quando estou em festas ou eventos sociais",
    "Como mais quando vejo outras pessoas comendo",
    "Tenho dificuldade de resistir a promo√ß√µes ou propagandas de comida",
    "Sinto vontade de comer ao passar por lugares com cheiro ou vis√£o de comida",
    "Sinto que como automaticamente ao ver comida por perto",
    "Penso frequentemente em comida mesmo sem fome",
    "Planejo minha alimenta√ß√£o com anteced√™ncia",
    "Costumo respeitar meus sinais de fome e saciedade",
    "Sinto que tenho controle sobre minhas escolhas alimentares",
    "Consigo lidar bem com vontades sem precisar comer",
    "Meus valores pessoais influenciam minhas escolhas alimentares",
    "Consigo manter uma alimenta√ß√£o equilibrada mesmo sob estresse",
    "Consigo dizer 'n√£o' √† comida quando n√£o estou com fome",
    "Tenho orgulho das minhas atitudes em rela√ß√£o √† alimenta√ß√£o"
]

# Pensamentos sabotadores (10)
pensamentos = [
    "J√° que comi algo 'errado', agora vou exagerar de vez",
    "Hoje √© uma exce√ß√£o, come√ßo de verdade amanh√£",
    "N√£o posso desperdi√ßar comida, ent√£o tenho que comer tudo",
    "√â falta de educa√ß√£o recusar comida que me oferecem",
    "Estou muito estressada(o), mere√ßo esse prazer agora",
    "Comi em maior quantidade s√≥ porque era uma ocasi√£o especial ou algo que n√£o como frequentemente.",
    "Se eu n√£o comer agora, posso me arrepender depois",
    "S√≥ mais um pedacinho n√£o vai fazer diferen√ßa",
    "Se eu comer escondido, √© como se n√£o contasse",
    "N√£o adianta tentar, eu sempre fracasso mesmo"
]

# Divis√£o em p√°ginas
respostas_comportamento = []
respostas_pensamentos = []

if iniciar or st.session_state.pagina > 0:
    blocos = [perguntas_comportamento[i:i+5] for i in range(0, len(perguntas_comportamento), 5)]
    if st.session_state.pagina < len(blocos):
        st.markdown(f"### Parte {st.session_state.pagina + 1}")
        with st.form(key=f"pagina_{st.session_state.pagina}"):
            for pergunta in blocos[st.session_state.pagina]:
                resposta = st.radio(pergunta, ["Nunca", "Raramente", "√Äs vezes", "Frequentemente", "Quase sempre"], key=pergunta)
                respostas_comportamento.append(resposta)
            if st.form_submit_button("Pr√≥xima p√°gina"):
                st.session_state.pagina += 1
    elif st.session_state.pagina == len(blocos):
        st.markdown("### Pensamentos Sabotadores")
        st.markdown("Com que frequ√™ncia voc√™ se identifica com os pensamentos abaixo?")
        with st.form(key="pensamentos_form"):
            for pensamento in pensamentos:
                resposta = st.radio(pensamento, ["Nunca", "Raramente", "√Äs vezes", "Frequentemente", "Quase sempre"], key=pensamento)
                respostas_pensamentos.append(resposta)
            if st.form_submit_button("Finalizar question√°rio"):
                st.session_state.pagina += 1

# Convers√£o de respostas em pontua√ß√£o
mapa_pontuacao = {"Nunca": 1, "Raramente": 2, "√Äs vezes": 3, "Frequentemente": 4, "Quase sempre": 5}

def calcular_media(respostas):
    return round(sum([mapa_pontuacao[r] for r in respostas]) / len(respostas), 2)

# An√°lise final
if st.session_state.pagina > len(blocos):
    st.success("Question√°rio conclu√≠do! Veja abaixo sua an√°lise comportamental:")

    categorias = {
        "Fome Emocional": perguntas_comportamento[:8],
        "Comer por Influ√™ncia Externa": perguntas_comportamento[8:14],
        "Autocontrole e Valores": perguntas_comportamento[14:]
    }

    for categoria, perguntas in categorias.items():
        respostas_cat = [st.session_state.get(pergunta) for pergunta in perguntas]
        media = calcular_media(respostas_cat)
        st.markdown(f"#### {categoria}: {media}")

        if categoria == "Fome Emocional":
            if media >= 4:
                st.write("Alerta de fome emocional intensa. Busque estrat√©gias de regula√ß√£o emocional que n√£o envolvam comida.")
            elif media >= 2.5:
                st.write("Voc√™ apresenta sinais de fome emocional em algumas situa√ß√µes. Fique atenta(o) aos gatilhos.")
            else:
                st.write("Voc√™ demonstra bom controle sobre sua alimenta√ß√£o emocional.")
        elif categoria == "Comer por Influ√™ncia Externa":
            if media >= 4:
                st.write("Voc√™ se deixa levar bastante por est√≠mulos externos. Isso pode afetar suas escolhas.")
            elif media >= 2.5:
                st.write("H√° influ√™ncia externa moderada sobre sua alimenta√ß√£o. Trabalhe seu foco interno.")
            else:
                st.write("Voc√™ demonstra autonomia diante de influ√™ncias externas.")
        elif categoria == "Autocontrole e Valores":
            if media >= 4:
                st.write("Voc√™ demonstra excelente autocontrole e alinhamento com seus valores pessoais.")
            elif media >= 2.5:
                st.write("Seu autocontrole est√° em desenvolvimento. H√° espa√ßo para fortalecimento.")
            else:
                st.write("Voc√™ pode estar enfrentando dificuldades com controle e consist√™ncia. Que tal buscar apoio?")
    
    st.info("‚ö†Ô∏è Este question√°rio n√£o possui valida√ß√£o cient√≠fica formal, mas foi baseado em instrumentos reconhecidos. Use como ferramenta de autoconhecimento.")

    # Envio para planilha
    if st.button("üì® Enviar respostas"):
        try:
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            secret_dict = st.secrets["gcp_service_account"]
            creds = ServiceAccountCredentials.from_json_keyfile_dict(secret_dict, scope)
            client = gspread.authorize(creds)
            sheet = client.open("Raio-X Comportamental - Respostas").sheet1

            dados = [datetime.now().strftime("%d/%m/%Y %H:%M:%S"), nome, email, celular]
            dados += [st.session_state.get(p) for p in perguntas_comportamento]
            dados += [st.session_state.get(p) for p in pensamentos]

            sheet.append_row(dados)
            st.success("Respostas enviadas com sucesso! Obrigada por participar üíõ")
        except Exception as e:
            st.error(f"Erro ao salvar na planilha: {e}")
